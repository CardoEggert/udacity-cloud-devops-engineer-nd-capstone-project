version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1.4
jobs:
  load-dependencies:
    docker:
      - image: cimg/openjdk:19.0.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: gradle dependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

  compile-main:
    docker:
      - image: cimg/openjdk:19.0.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: gradle compileJava

  compile-test:
    docker:
      - image: cimg/openjdk:19.0.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: gradle compileTestJava

  lint-main:
    docker:
      - image: cimg/openjdk:19.0.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: gradle checkstyleMain

  lint-test:
    docker:
      - image: cimg/openjdk:19.0.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: gradle checkstyleTest

  test:
    docker:
      - image: cimg/openjdk:19.0.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: gradle test

  build-jar:
    docker:
      - image: cimg/openjdk:19.0.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: gradle bootJar
      - save_cache:
          key: build-directory-{{ .Environment.CIRCLE_WORKFLOW_ID }}
          paths:
            - build/libs/
      - run: |
          pwd
          ls -a
          echo "Changing dir to build"
          cd build
          ls -a
          echo "Changing dir to libs"
          cd libs
          ls -a
  build-and-push-image:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker
      - aws-cli/setup
      - restore_cache:
          key: build-directory-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run: |
          pwd
          ls -a
          echo "Changing dir to build"
          cd build
          ls -a
          echo "Changing dir to libs"
          cd libs
          ls -a
      - run:
          name: Build application Docker image
          command: |
            docker build --tag=hellospringapp .
      - run:
          name: Login and push to AWS ECR
          command: |
            aws ecr get-login-password \
              --region ${AWS_DEFAULT_REGION} \
            | docker login \
              --username AWS \
              --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
            docker tag hellospringapp "${ECR_ENDPOINT}/hellospringapp:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT}/hellospringapp:${CIRCLE_SHA1}"

workflows:
  default:
    jobs:
      - load-dependencies
      - compile-main:
          requires: [load-dependencies]
      - compile-test:
          requires: [load-dependencies]
      - lint-main:
          requires: [load-dependencies]
      - lint-test:
          requires: [load-dependencies]
      - test:
          requires: [load-dependencies]
      - build-jar:
          requires: [test, lint-test, lint-main, compile-main, compile-test]
      - build-and-push-image:
          requires: [build-jar]
          filters:
            branches:
              only: 
                - main