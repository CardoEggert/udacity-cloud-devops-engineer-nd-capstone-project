version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1.4
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3.1
jobs:
  load-dependencies:
    docker:
      - image: cimg/openjdk:19.0.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: gradle dependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

  compile-main:
    docker:
      - image: cimg/openjdk:19.0.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: gradle compileJava

  compile-test:
    docker:
      - image: cimg/openjdk:19.0.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: gradle compileTestJava

  lint-main:
    docker:
      - image: cimg/openjdk:19.0.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: gradle checkstyleMain

  lint-test:
    docker:
      - image: cimg/openjdk:19.0.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: gradle checkstyleTest

  test:
    docker:
      - image: cimg/openjdk:19.0.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: gradle test

  build-jar:
    docker:
      - image: cimg/openjdk:19.0.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: gradle bootJar
      - save_cache:
          key: build-directory-{{ .Environment.CIRCLE_WORKFLOW_ID }}
          paths:
            - build/libs/
  build-and-push-image:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker
      - aws-cli/setup
      - restore_cache:
          key: build-directory-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: Build application Docker image
          command: |
            docker build -t hellospringapp .
      - run:
          name: Login and push to AWS ECR
          command: |
            aws ecr get-login-password \
              --region ${AWS_DEFAULT_REGION} \
            | docker login \
              --username AWS \
              --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
            docker tag hellospringapp "${ECR_ENDPOINT}/hellospringapp:latest"
            docker push "${ECR_ENDPOINT}/hellospringapp:latest"
  configure-k8:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Deploy K8 stack if not present
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/configure-k8.yml \
              --stack-name "capstone" \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" \
              --parameter-overrides EnvironmentName="capstone"
  deploy-app:
    docker:
      - image: cimg/base:stable
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: .circleci/files/k8/deployment.yaml
          resource-name: deployment/hellospringapp-api
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: .circleci/files/k8/service.yaml
          resource-name: deployment/hellospringapp-api
      - kubernetes/update-container-image:
          container-image-updates: 'hellospringapp-api=091499481377.dkr.ecr.us-east-1.amazonaws.com/hellospringapp:latest'
          get-rollout-status: true
          resource-name: deployment/hellospringapp-api
  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: cURL to endpoints
          command: |
            export LB_URL=$(aws elb describe-load-balancers --query "LoadBalancerDescriptions[0].DNSName" --output=text)
            echo $LB_URL
            if curl -sI "http://${LB_URL}/v1/hello?name=Capstone" | grep 200
            then
                exit 0
            else
                exit 1
            fi

workflows:
  default:
    jobs:
      - load-dependencies
      - compile-main:
          requires: [load-dependencies]
      - compile-test:
          requires: [load-dependencies]
      - lint-main:
          requires: [load-dependencies]
      - lint-test:
          requires: [load-dependencies]
      - test:
          requires: [load-dependencies]
      - build-jar:
          requires: [test, lint-test, lint-main, compile-main, compile-test]
      - build-and-push-image:
          requires: [build-jar]
          filters:
            branches:
              only: 
                - main
      - configure-k8:
          requires: [build-and-push-image]
      - deploy-app:
          cluster-name: capstone-Project-Cluster
          requires: [configure-k8]
      - smoke-test:
          requires: [deploy-app]