version: 2.1

jobs:
  load-dependencies:
    docker:
      - image: cimg/openjdk:19.0.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: gradle dependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

  compile-main:
    docker:
      - image: cimg/openjdk:19.0.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: gradle compileJava

  compile-test:
    docker:
      - image: cimg/openjdk:19.0.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: gradle compileTestJava

  lint-main:
    docker:
      - image: cimg/openjdk:19.0.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: gradle checkstyleMain

  lint-test:
    docker:
      - image: cimg/openjdk:19.0.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: gradle checkstyleTest

  test:
    docker:
      - image: cimg/openjdk:19.0.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: gradle test

  build-jar:
    docker:
      - image: cimg/openjdk:19.0.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: gradle bootJar
      - persist_to_workspace:
          root: build/libs
          paths:
            - HelloSpring-0.0.1-SNAPSHOT.jar
# Reference to article: https://circleci.com/blog/how-to-build-a-docker-image-on-circleci-2-0/
# Used it for building and pushing docker image to amazon ecr 
  build-and-push-image:
    docker:
      - image: docker:23.0.1
    steps:
      - checkout
      - run: mkdir -p build/libs
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              docker-compose aws-cli docker-cli
      - attach_workspace:
          at: /build/libs
      - run:
          name: Build application Docker image
          command: |
            docker build --tag=hellospringapp . 
      - deploy:
          name: Push application Docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              login="$(aws ecr get-login)"
              ${login}
              docker tag hellospringapp "${ECR_ENDPOINT}/hellospringapp:${CIRCLE_SHA1}"
              docker push "${ECR_ENDPOINT}/hellospringapp:${CIRCLE_SHA1}"
            fi

workflows:
  default:
    jobs:
      - load-dependencies
      - compile-main:
          requires: [load-dependencies]
      - compile-test:
          requires: [load-dependencies]
      - lint-main:
          requires: [load-dependencies]
      - lint-test:
          requires: [load-dependencies]
      - test:
          requires: [load-dependencies]
      - build-jar:
          requires: [test, lint-test, lint-main, compile-main, compile-test]
      - build-and-push-image:
          requires: [build-jar]